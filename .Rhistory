stat = "identity",
width = 1,
fill = "#4277BE",
colour = "black",
size = 0.1
) +
ggtitle("Stationary Distribution") +
labs(x = "Number of A-types i", y = bquote('Probability ' * mu[i])) +
ylim(c(0, 0.015)) +
theme_simple() +
theme(
plot.title = element_text(
hjust = 0.5,
margin = margin(t = 30, b = 20, unit = "pt"),
lineheight = 1.15
),
axis.title.x =  element_text(margin = margin(t = 15, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 15, unit = "pt")),
text = element_text(size = 16)
)
ggplot(data = MuDF, aes(x = N, y = Mu)) +
geom_bar(
stat = "identity",
width = 1,
fill = "#4277BE",
colour = "black",
size = 0.1
) +
ggtitle("Stationary Distribution") +
labs(x = "Number of A-types i", y = bquote('Probability ' * mu[i])) +
ylim(c(0, 0.015)) +
theme_light() +
theme(
plot.title = element_text(
hjust = 0.5,
margin = margin(t = 30, b = 20, unit = "pt"),
lineheight = 1.15
),
axis.title.x =  element_text(margin = margin(t = 15, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 15, unit = "pt")),
text = element_text(size = 16)
)
ggplot(data = MuDF, aes(x = N, y = Mu)) +
geom_bar(
stat = "identity",
width = 1,
fill = "#4277BE",
colour = "black",
size = 0.1
) +
ggtitle("Stationary Distribution") +
labs(x = "Number of A-types i", y = bquote('Probability ' * mu[i])) +
ylim(c(0, 0.015)) +
theme_light(panel.grid.major = element_blank()) +
theme(
plot.title = element_text(
hjust = 0.5,
margin = margin(t = 30, b = 20, unit = "pt"),
lineheight = 1.15
),
axis.title.x =  element_text(margin = margin(t = 15, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 15, unit = "pt")),
text = element_text(size = 16)
)
ggplot(data = MuDF, aes(x = N, y = Mu)) +
geom_bar(
stat = "identity",
width = 1,
fill = "#4277BE",
colour = "black",
size = 0.1
) +
ggtitle("Stationary Distribution") +
labs(x = "Number of A-types i", y = bquote('Probability ' * mu[i])) +
ylim(c(0, 0.015)) +
theme_light() +
theme(
plot.title = element_text(
hjust = 0.5,
margin = margin(t = 30, b = 20, unit = "pt"),
lineheight = 1.15
),
axis.title.x =  element_text(margin = margin(t = 15, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 15, unit = "pt")),
text = element_text(size = 16),
panel.grid.major = element_blank()
)
ggplot(data = MuDF, aes(x = N, y = Mu)) +
geom_bar(
stat = "identity",
width = 1,
fill = "#4277BE",
colour = "black",
size = 0.1
) +
ggtitle("Stationary Distribution") +
labs(x = "Number of A-types i", y = bquote('Probability ' * mu[i])) +
ylim(c(0, 0.015)) +
theme_light() +
theme(
plot.title = element_text(
hjust = 0.5,
margin = margin(t = 30, b = 20, unit = "pt"),
lineheight = 1.15
),
axis.title.x =  element_text(margin = margin(t = 15, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 15, unit = "pt")),
text = element_text(size = 16)
)
ggplot(data = MuDF, aes(x = N, y = Mu)) +
geom_bar(
stat = "identity",
width = 1,
fill = "#4277BE",
colour = "black",
size = 0.1
) +
ggtitle("Stationary Distribution") +
labs(x = "Number of A-types i", y = bquote('Probability ' * mu[i])) +
ylim(c(0, 0.015)) +
theme_light() +
theme(
plot.title = element_text(
hjust = 0.5,
margin = margin(t = 30, b = 20, unit = "pt"),
lineheight = 1.15
),
panel.grid.major = element_blank(),
axis.title.x =  element_text(margin = margin(t = 15, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 15, unit = "pt")),
text = element_text(size = 16)
)
ggplot(data = MuDF, aes(x = N, y = Mu)) +
geom_bar(
stat = "identity",
width = 1,
fill = "#4277BE",
colour = "black",
size = 0.1
) +
ggtitle("Stationary Distribution") +
labs(x = "Number of A-types i", y = bquote('Probability ' * mu[i])) +
ylim(c(0, 0.015)) +
theme_light() +
theme(
plot.title = element_text(
hjust = 0.5,
margin = margin(t = 30, b = 20, unit = "pt"),
lineheight = 1.15
),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x =  element_text(margin = margin(t = 15, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 15, unit = "pt")),
text = element_text(size = 16)
)
# Frequencey-Dependent Moran Process
# For 2x2 Symmetric Games
# by Aydin Mohseni
# aydin.mohseni@gmail.com
# Load packages
Packages <- c('ggplot2', 'expm', 'reshape2')
lapply(Packages, library, character.only = TRUE)
# Let G be a 2x2 symmetric game
# with two players
# pure strategies A, B
# and payoff matrix M = matrix(c(a,b,c, d), nrow=2, ncol=2, byrow=TRUE).
# Then the payoff to each combination of actions would be given by
# U(A,A)=a, U(A,B)=b, U(B,A)=c, U(B,B)=d.
# Assign game types:
gameType <- "AC"
# Establish payoff variables 'a', 'b', 'c', 'd'
payoffVariables <- c(letters[seq(1:4)])
# Neutral Game (NG)
if (gameType == "NG") { payoffs <-  c(0, 0, 0, 0) }
# Prisoner's Dilemma (PD)
if (gameType == "PD") {   payoffs <-  c(2, 0, 3, 1) }
# Stag Hunt (SH)
if (gameType == "SH") { payoffs <-  c(3, 0, 2, 2) }
# Hawk-Dove (HD)
if (gameType == "HD") { payoffs <-  c(0, 3, 1, 2) }
# Generic Anti-Coordination (AC)
if (gameType == "AC") { payoffs <-  c(1, 2, 2, 1) }
# Assign payoffs from chosen game
for (i in 1:length(payoffVariables)) { assign(payoffVariables[i], payoffs[i]) }
# Population Size (we are interested in 'Large Populations' where N -> ∞)
N <- 98
# i = number of type A
# N-i = number of type B
# Pr(A-type interacts with A-type) = (i-1) / (N-1)
# Pr(A-type interacts with B-type) = (N-i) / (N-1)
# Pr(B-type interacts with A-type) = (i) / (N-1)
# Pr(B-type interacts with B-type) = (N-i-1) / (N-1)
# Expected Payoff to Each Strategy
FA <- function(i) { (a * (i - 1) + b * (N - i)) / (N-1) }
FB <- function(i) { (c * (i) + d * (N - i - 1)) / (N-1) }
# Intensity of Selection (we are interested in in 'Weak Selection' where w -> 0)
w <- 0
# Fitness (Reproductive/Imitative Success) of Each Strategy
fA <- function(i) (1 - w + w * FA(i))
fB <- function(i) (1 - w + w * FB(i))
# Transition Probabilities for Moran Process
# Population Fitness
P <- function(i) { (i * fA(i) + (N-i) * fB(i)) }
# Pr(j -> j+1)
Pforward <- function(i) { (i * fA(i) / P(i)) * ((N-i) / N) }
# Pr(j -> j-1)
Pback <- function(i) { ((N - i) * fB(i) / P(i)) * (i / N) }
# Pr(j -> j)
Pstay <- function(i) { 1 - (Pforward(i) + Pback(i)) }
# Transition Proabilities for Moran Process with Mutation
# Mutation Rate (we are interested in ‘Vanishing Mutation’ where η->0)
η <- 0.01
# Pr(j -> j+1)
PforwardM <- function(i) {
(1 - η) * ((i * fA(i) / P(i)) * ((N - i) / N)) +  η * (((N - i) * fB(i) / P(i)) * ((N - i) / N))
}
# Pr(j -> j-1)
PbackM <- function(i) {
(1 - η) * (((N - i) * fB(i) / P(i)) * (i / N)) +  η * ((i * fA(i) / P(i)) * (i / N))
}
# Pr(j -> j)
PstayM <- function(i) {
1 - (PforwardM(i) + PbackM(i))
}
# The MPM Transition Matrix :: (MPM)
MPM <- matrix(nrow = N + 1,
ncol = N + 1,
byrow = TRUE)
# Relabel the row and columns to correspond to the number of A-types in the N-size population
rownames(MPM) = c(0:N)
colnames(MPM) = c(0:N)
MPM <- outer(
0:N,
0:N,
FUN = function(r, c)
ifelse(c == r - 1, PbackM(r),
ifelse(
c == r, PstayM(r),
ifelse(c == r + 1, PforwardM(r),
0)
))
)
# We can approximate the unique stationary distribution of the MPM
# using the Chapman-Kolmogorv equations
# which state P^n = (P)^n -- that is,
# the nth-step Markov process P^n is equivalent to
# the n-th power of the 1-step Markov process P.
# Thus we take MPM ^ T, for some large T
# Denote MPM^∞ := MPMlim
for (x in 1:1000) {
MPMlim <- MPM %^% 1000
MuApproxVector <- round(MPMlim[round(N/2),], digits=5)
}
for (y in 1:1000) {
# We compute the stationary distribution of the process
# First, we calculate µ_0 = ( Σ^{N}_{k=0} Π^{k}_{i=1} PforwardM_{i-1} / PbackM_{i} ) ^ -1
Mu0Vector <- c() # Empty vector, in which to store each product
# Empty matrix, in which to store each element of the products
Mu0Matrix <- matrix(data = 1,
nrow = N + 1,
ncol = N + 1)
for (k in 2:(N + 1)) {
for (i in 2:k) {
Mu0Matrix[k, i - 1] <- MPM[i - 1, i] / MPM[i, i - 1]
}
}
# Take the product of the rows of Mu0Matrix
for (i in 1:(N + 1)) { Mu0Vector[i] <- prod(Mu0Matrix[i, ]) }
# Compute µ_0
Mu0 <- sum(Mu0Vector) ^ -1
# Now, we calculate µ_k = µ_0 * Π^{k}_{i=1} PforwardM_{i-1} / PbackM_{i} )
MuVector <- c()
# Empty matrix, in which to store each element of the products
MuMatrix <- matrix(data = 1,
nrow = N + 1,
ncol = N + 1)
for (k in 2:(N + 1)) {
for (i in 2:k) {
MuMatrix[k, i - 1] <- MPM[i - 1, i] / MPM[i, i - 1]
}
}
for (i in 1:(N + 1)) { MuVector[i] <- Mu0 * prod(MuMatrix[i, ]) }
}
MuDF <- data.frame(N = c(0:N), Mu = MuVector, MuApprox = MuApproxVector)
MuDFmelt <- melt(MuDF, id.vars = 1, variable.name = "Method", value.name = "Mass")
# Finally, plot the stationary distribution
ggplot(data = MuDFmelt, aes(x = N, y = Mass, fill = Method)) +
geom_bar(stat = "identity",
width = 1,
alpha = .5) +
ggtitle("Stationary Distribution") +
labs(x = "Number of A-types in the Population i", y = bquote('Probability ' * mu[i])) +
ylim(c(0, 1)) +
theme_light() +
theme(
plot.title = element_text(
hjust = 0.5,
margin = margin(b = 10, unit = "pt"),
lineheight = 1.15
),
axis.title.x =  element_text(margin = margin(t = 15, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 15, unit = "pt")),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 10),
text = element_text(size = 12)
)
# OTHER PLOT OF STATIONARY DISTRIBUTION
ggplot(data = MuDF, aes(x = N, y = Mu)) +
geom_bar(
stat = "identity",
width = 1,
fill = "#4277BE",
colour = "black",
size = 0.1
) +
ggtitle("Stationary Distribution") +
labs(x = "Number of A-types i", y = bquote('Probability ' * mu[i])) +
ylim(c(0, 0.015)) +
theme_light() +
theme(
plot.title = element_text(
hjust = 0.5,
margin = margin(t = 30, b = 20, unit = "pt"),
lineheight = 1.15
),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x =  element_text(margin = margin(t = 15, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 15, unit = "pt")),
text = element_text(size = 16)
)
# Frequencey-Dependent Moran Process
# For 2x2 Symmetric Games
# by Aydin Mohseni
# aydin.mohseni@gmail.com
# Load packages
Packages <- c('ggplot2', 'expm', 'reshape2')
lapply(Packages, library, character.only = TRUE)
# Let G be a 2x2 symmetric game
# with two players
# pure strategies A, B
# and payoff matrix M = matrix(c(a,b,c, d), nrow=2, ncol=2, byrow=TRUE).
# Then the payoff to each combination of actions would be given by
# U(A,A)=a, U(A,B)=b, U(B,A)=c, U(B,B)=d.
# Assign game types:
gameType <- "AC"
# Establish payoff variables 'a', 'b', 'c', 'd'
payoffVariables <- c(letters[seq(1:4)])
# Neutral Game (NG)
if (gameType == "NG") { payoffs <-  c(0, 0, 0, 0) }
# Prisoner's Dilemma (PD)
if (gameType == "PD") {   payoffs <-  c(2, 0, 3, 1) }
# Stag Hunt (SH)
if (gameType == "SH") { payoffs <-  c(3, 0, 2, 2) }
# Hawk-Dove (HD)
if (gameType == "HD") { payoffs <-  c(0, 3, 1, 2) }
# Generic Anti-Coordination (AC)
if (gameType == "AC") { payoffs <-  c(1, 2, 2, 1) }
# Assign payoffs from chosen game
for (i in 1:length(payoffVariables)) { assign(payoffVariables[i], payoffs[i]) }
# Population Size (we are interested in 'Large Populations' where N -> ∞)
N <- 98
# i = number of type A
# N-i = number of type B
# Pr(A-type interacts with A-type) = (i-1) / (N-1)
# Pr(A-type interacts with B-type) = (N-i) / (N-1)
# Pr(B-type interacts with A-type) = (i) / (N-1)
# Pr(B-type interacts with B-type) = (N-i-1) / (N-1)
# Expected Payoff to Each Strategy
FA <- function(i) { (a * (i - 1) + b * (N - i)) / (N-1) }
FB <- function(i) { (c * (i) + d * (N - i - 1)) / (N-1) }
# Intensity of Selection (we are interested in in 'Weak Selection' where w -> 0)
w <- 0
# Fitness (Reproductive/Imitative Success) of Each Strategy
fA <- function(i) (1 - w + w * FA(i))
fB <- function(i) (1 - w + w * FB(i))
# Transition Probabilities for Moran Process
# Population Fitness
P <- function(i) { (i * fA(i) + (N-i) * fB(i)) }
# Pr(j -> j+1)
Pforward <- function(i) { (i * fA(i) / P(i)) * ((N-i) / N) }
# Pr(j -> j-1)
Pback <- function(i) { ((N - i) * fB(i) / P(i)) * (i / N) }
# Pr(j -> j)
Pstay <- function(i) { 1 - (Pforward(i) + Pback(i)) }
# Transition Proabilities for Moran Process with Mutation
# Mutation Rate (we are interested in ‘Vanishing Mutation’ where η->0)
η <- 0.011
# Pr(j -> j+1)
PforwardM <- function(i) {
(1 - η) * ((i * fA(i) / P(i)) * ((N - i) / N)) +  η * (((N - i) * fB(i) / P(i)) * ((N - i) / N))
}
# Pr(j -> j-1)
PbackM <- function(i) {
(1 - η) * (((N - i) * fB(i) / P(i)) * (i / N)) +  η * ((i * fA(i) / P(i)) * (i / N))
}
# Pr(j -> j)
PstayM <- function(i) {
1 - (PforwardM(i) + PbackM(i))
}
# The MPM Transition Matrix :: (MPM)
MPM <- matrix(nrow = N + 1,
ncol = N + 1,
byrow = TRUE)
# Relabel the row and columns to correspond to the number of A-types in the N-size population
rownames(MPM) = c(0:N)
colnames(MPM) = c(0:N)
MPM <- outer(
0:N,
0:N,
FUN = function(r, c)
ifelse(c == r - 1, PbackM(r),
ifelse(
c == r, PstayM(r),
ifelse(c == r + 1, PforwardM(r),
0)
))
)
# We can approximate the unique stationary distribution of the MPM
# using the Chapman-Kolmogorv equations
# which state P^n = (P)^n -- that is,
# the nth-step Markov process P^n is equivalent to
# the n-th power of the 1-step Markov process P.
# Thus we take MPM ^ T, for some large T
# Denote MPM^∞ := MPMlim
for (x in 1:1000) {
MPMlim <- MPM %^% 1000
MuApproxVector <- round(MPMlim[round(N/2),], digits=5)
}
for (y in 1:1000) {
# We compute the stationary distribution of the process
# First, we calculate µ_0 = ( Σ^{N}_{k=0} Π^{k}_{i=1} PforwardM_{i-1} / PbackM_{i} ) ^ -1
Mu0Vector <- c() # Empty vector, in which to store each product
# Empty matrix, in which to store each element of the products
Mu0Matrix <- matrix(data = 1,
nrow = N + 1,
ncol = N + 1)
for (k in 2:(N + 1)) {
for (i in 2:k) {
Mu0Matrix[k, i - 1] <- MPM[i - 1, i] / MPM[i, i - 1]
}
}
# Take the product of the rows of Mu0Matrix
for (i in 1:(N + 1)) { Mu0Vector[i] <- prod(Mu0Matrix[i, ]) }
# Compute µ_0
Mu0 <- sum(Mu0Vector) ^ -1
# Now, we calculate µ_k = µ_0 * Π^{k}_{i=1} PforwardM_{i-1} / PbackM_{i} )
MuVector <- c()
# Empty matrix, in which to store each element of the products
MuMatrix <- matrix(data = 1,
nrow = N + 1,
ncol = N + 1)
for (k in 2:(N + 1)) {
for (i in 2:k) {
MuMatrix[k, i - 1] <- MPM[i - 1, i] / MPM[i, i - 1]
}
}
for (i in 1:(N + 1)) { MuVector[i] <- Mu0 * prod(MuMatrix[i, ]) }
}
MuDF <- data.frame(N = c(0:N), Mu = MuVector, MuApprox = MuApproxVector)
MuDFmelt <- melt(MuDF, id.vars = 1, variable.name = "Method", value.name = "Mass")
# Finally, plot the stationary distribution
ggplot(data = MuDFmelt, aes(x = N, y = Mass, fill = Method)) +
geom_bar(stat = "identity",
width = 1,
alpha = .5) +
ggtitle("Stationary Distribution") +
labs(x = "Number of A-types in the Population i", y = bquote('Probability ' * mu[i])) +
ylim(c(0, 1)) +
theme_light() +
theme(
plot.title = element_text(
hjust = 0.5,
margin = margin(b = 10, unit = "pt"),
lineheight = 1.15
),
axis.title.x =  element_text(margin = margin(t = 15, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 15, unit = "pt")),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 10),
text = element_text(size = 12)
)
# OTHER PLOT OF STATIONARY DISTRIBUTION
ggplot(data = MuDF, aes(x = N, y = Mu)) +
geom_bar(
stat = "identity",
width = 1,
fill = "#4277BE",
colour = "black",
size = 0.1
) +
ggtitle("Stationary Distribution") +
labs(x = "Number of A-types i", y = bquote('Probability ' * mu[i])) +
ylim(c(0, 0.015)) +
theme_light() +
theme(
plot.title = element_text(
hjust = 0.5,
margin = margin(t = 30, b = 20, unit = "pt"),
lineheight = 1.15
),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x =  element_text(margin = margin(t = 15, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 15, unit = "pt")),
text = element_text(size = 16)
)
shiny::runApp('GitHub/Self-Assembling-Networks')
runApp('GitHub/Self-Assembling-Networks')
